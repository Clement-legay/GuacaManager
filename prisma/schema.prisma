// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  firstName String
  lastName  String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  FormsCreated Forms[] @relation("FormCreatedBy")
  FormsUpdated Forms[] @relation("FormUpdatedBy")
}

model TemplateFile {
  id          String   @id @default(cuid())
  name        String
  description String
  size        Int
  fileType    String
  path        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  FileAssociations FileAssociation[] @relation("ExcelFileToFileAssociation")
}

model FileAssociation {
  id String @id @default(cuid())

  formInputId String
  FormInput   FormInputs @relation("FormInputToFileAssociation", fields: [formInputId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  templateFileId String?
  TemplateFile   TemplateFile? @relation("ExcelFileToFileAssociation", fields: [templateFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Forms {
  id                 String  @id @default(cuid())
  alias              String? @unique
  name               String
  description        String?
  status             String
  isNotifying        Boolean @default(false)
  notificationEmails String?

  createdBy String?
  CreatedBy User?   @relation("FormCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)

  updatedBy String?
  UpdatedBy User?   @relation("FormUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  FormInputs FormInputs[]    @relation("FormToFormInputs")
  Responses  FormResponses[] @relation("FormToFormResponses")
}

model FormInputs {
  id            String  @id @default(cuid())
  name          String
  label         String?
  value         String?
  type          String
  order         Int
  isRequired    Boolean
  isHidden      Boolean
  isConditional Boolean
  isMultiple    Boolean

  conditionalInputId    String?
  ConditionalInput      FormInputs?  @relation("FormInputToFormInput", fields: [conditionalInputId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ConditionedFormInputs FormInputs[] @relation("FormInputToFormInput")

  conditionalValue String?

  formId String
  Form   Forms  @relation("FormToFormInputs", fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InputOptions     InputOptions[]       @relation("FormInputToInputOptions")
  Responses        FormResponseInputs[] @relation("FormInputToFormResponseInputs")
  FileAssociations FileAssociation[]    @relation("FormInputToFileAssociation")
}

model InputOptions {
  id          String @id @default(cuid())
  optionName  String
  optionValue String
  order       Int

  formInputId String
  FormInput   FormInputs @relation("FormInputToInputOptions", fields: [formInputId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormResponses {
  id String @id @default(cuid())

  formId String
  Form   Forms  @relation("FormToFormResponses", fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  FormResponseInputs FormResponseInputs[] @relation("FormResponseToFormResponseInputs")
}

model FormResponseInputs {
  id String @id @default(cuid())

  formResponseId String
  FormResponse   FormResponses @relation("FormResponseToFormResponseInputs", fields: [formResponseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  formInputId String
  FormInput   FormInputs @relation("FormInputToFormResponseInputs", fields: [formInputId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  value       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  FileSpecs FileSpecs? @relation("FormResponseInputToFileSpecs")
}

model FileSpecs {
  id       String @id @default(cuid())
  name     String
  size     Int
  fileType String

  formResponseInputId String             @unique
  FormResponseInput   FormResponseInputs @relation("FormResponseInputToFileSpecs", fields: [formResponseInputId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
